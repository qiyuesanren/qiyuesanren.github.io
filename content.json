{"meta":{"title":"安柒","subtitle":null,"description":null,"author":"安柒","url":"https://qiyuesanren.github.io","root":"/"},"pages":[{"title":"七月散人 | 404","date":"2020-11-13T09:57:33.572Z","updated":"2019-09-22T04:17:44.000Z","comments":true,"path":"404.html","permalink":"https://qiyuesanren.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2020-11-13T09:57:33.572Z","updated":"2019-09-21T00:12:36.000Z","comments":false,"path":"categories/index.html","permalink":"https://qiyuesanren.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-13T09:57:33.572Z","updated":"2019-09-21T00:12:06.000Z","comments":false,"path":"tags/index.html","permalink":"https://qiyuesanren.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"路由策略","slug":"路由策略","date":"2020-11-28T00:54:57.000Z","updated":"2020-11-27T13:15:25.475Z","comments":true,"path":"2020/11/27/路由策略/","link":"","permalink":"https://qiyuesanren.github.io/2020/11/27/路由策略/","excerpt":"","text":"路由策略路由器的规制 基于目的的，尽力而为的转发 对数据3层报头(网络层)中的目的IP，与自己的路由表做匹配 实验环境为：eNSP ACL(访问控制列表)功能：通过对3层，4层报头的指定字段进行匹配，实现数据包的管控 IP数据包五元组： 源IP地址 目的IP地址 协议号 源端口号 目的端口号 方式：如果数据匹配直接deny(干掉)，不匹配的话，正常通过。 类型： 基础ACL：只匹配源IP地址 增强ACL：对五元组进行检查 ACL调用：设备接口的方向(是接收到的数据检查ACL，还是发送的数据检查ACL) 规则： ACL的规则是逐条匹配，只要匹配上了，后面便不会看了， 写入规则是按照条目由精确到模糊 ACL 末尾隐含deny any(拒绝所有)，只要考虑使用ACL，那么该ACL至少包括一条permit(放行)语句 ACL不检查自身发起的流量 12345678910111213141516171819R1 为RIPGE0/0/0为192.168.1.1/26RIP 的 network 192.168.1.0因为 A类IP段：0.0.0.0 到 127.255.255.255.A类 网段都是x.0.0.0B类IP段：128.0.0.0 到 191.255.255.255.B类 网段都是x.x.0.0C类IP段：192.0.0.0 到 223.255.255.255.C类 网段都是x.x.x.0R3 为OSPFloopback 0 为192.168.3.3/26OSPF 的通配符掩码为0.0.0.32-26=6=255-128-64=63 实现： 123456789101112131415161718192021222324252627282930313233343536基础ACL1.创建ACL表，声明该表是何种类型[R2]acl name haha basic [R2-acl-basic-haha] 或者[R2]acl 2000[R2-acl-basic-2000]因为INTEGER&lt;2000-2999&gt; Basic access-list(add to current using rules)INTEGER&lt;3000-3999&gt; Advanced access-list(add to current using rules)INTEGER&lt;4000-4999&gt; Specify a L2 acl group所以直接ACL 2000 也是可以滴2.根据策略写条目rule deny source 192.68.1.1 0.0.0.0(通配符掩码，如果通配符掩码指的是一个主机，那么通配符为全0)3.在接口的方向上进行注入ACL[R2]interface GigabitEthernet 0/0/0[R2-GigabitEthernet0/0/0]traffic-filter inbound acl 2000traffic-filter流量过滤inbound 进方向outbound 出方向观察命令display acl 2000取消ACL注入[R2-GigabitEthernet0/0/0]undo traffic-filter inbound删除ACL 2000[R2]display acl 2000Basic ACL 2000, 1 ruleAcl&apos;s step is 5 rule 5 deny source 192.168.1.1 0 [R2]undo acl 2000[R2]display acl 2000[R2] 啥都没有了 123456789101112131415161718192021222324252627282930313233扩展ACl[R2]acl 3000[R2-acl-adv-3000]rule deny ? &lt;1-255&gt; Protocol number gre GRE tunneling(47) icmp Internet Control Message Protocol(1) igmp Internet Group Management Protocol(2) ip Any IP protocol ipinip IP in IP tunneling(4) ospf OSPF routing protocol(89) tcp Transmission Control Protocol (6) udp User Datagram Protocol (17)单元组ACL[R2-acl-adv-3000]rule deny icmp source 192.168.1.1 0.0.0.0 destination 192.168.3.3 0.0.0.0多元组ACL[R2-acl-adv-3000]rule deny tcp source 192.168.1.1 0.0.0.0 source-port调用[R2]interface GigabitEthernet 0/0/0[R2-GigabitEthernet0/0/0]traffic-filter inbound acl 3000取消调用[R2]interface GigabitEthernet 0/0/0[R2-GigabitEthernet0/0/0]undo traffic-filter inbound 删除ACL 3000[R2]display acl 3000Advanced ACL 3000, 1 ruleAcl&apos;s step is 5rule 5 deny icmp source 192.168.1.1 0 destination 192.168.3.3 0 [R2]undo acl 3000[R2]display acl 3000[R2] 啥都没有了 IP-Prefix前缀列表功能：对路由更新包中的更新网段字段进行匹配，实现管控，在协议中调用 规则： ACL的规则是逐条匹配，只要匹配上了，后面便不会看了， 写入规则是按照条目由精确到模糊 ACL 末尾隐含deny any(拒绝所有)，只要考虑使用ACL，那么该ACL至少包括一条permit(放行)语句 ACL不检查自身发起的流量 案例： 1234567ip ip-prefix haha(名字) premit 192.168.1.0 24 匹配：24位的IP(192.168.1）是一样的 且子网掩码为24位，则匹配ip ip-prefix haha(名字) premit 192.168.1.0 24 greter-euqal 25 匹配：24位的IP(192.168.1）是一样的 且子网掩码大于等于25位的，则匹配 例：192.168.1.128 /25(26,27,28,29,30,31) 可以通过ip ip-prefix haha(名字) premit 192.168.1.0 24 less-euqal 28 匹配：24位的IP(192.168.1）是一样的 且子网掩码小于等于28位的(28-24)，则匹配 上手： 123456789101112131415创建[R2]ip ip-prefix haha deny 192.168.1.0 26调用，因为 192.168.1.0 是RIp 所以得在RIP中调用[R2]rip [R2-rip-1]version 2[R2-rip-1]filter-policy ip-prefix haha import删除调用[R2]rip [R2-rip-1]version 2[R2-rip-1]undo filter-policy ip-prefix haha import 删除ip-prefix[R2]undo ip ip-prefix haha Route-Policy(路由策略表)功能：功能强大，数据包管控，更新包管控，数据内容管控，打标签(网络某个位置打标签，另外的位置否定) 规则： ACL的规则是逐条匹配，只要匹配上了，后面便不会看了， 写入规则是按照条目由精确到模糊 ACL 末尾隐含deny any(拒绝所有)，只要考虑使用ACL，那么该ACL至少包括一条permit(放行)语句 ACL不检查自身发起的流量 主条目： 匹配子条目 执行子条目 案例： 1234第三步 route-policy haha permit node 10//这是haha表的第10条主条目 如果子条目，执行子条目，则主条目通过 第一步 if-match souce-ip 192.168.1.0 255.255.255.0 //如果没有匹配子条目，则匹配any 第二步 apply cost=100 //如果没有执行子条目，则按照主条目执行permit或者deny 上手 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950[R2]acl 2000[R2-acl-basic-2000]rule permit source 192.168.1.0 0.0.0.63 // permit(感兴趣)[R2]route-policy haha permit node 10route-policy haha permit node 10Info: New Sequence of this List.[R2-route-policy]if [R2-route-policy]if-match acl 2000[R2-route-policy]apply ? as-path BGP AS path list backup-interface Backup outgoing interface backup-nexthop Backup nexthop address behavior Specify QoS policy as behavior comm-filter Set BGP community filter (for deletion) community BGP community attribute cost Set metric of route cost-type Type of metric for destination routing protocol dampening Set BGP route flap dampening parameters extcommunity Set BGP/VPN extended community filter ip-address IP information ip-precedence Specify QoS policy as IP precedence ipv6 IPv6 Information isis Where to import route local-preference BGP local preference path attribute mpls-label Give the Label origin BGP origin code ospf Where to import route preference Give the Preference (Route Preference) preferred-value BGP Preferred-value (weight) for routing table qos-local-id Specify QoS policy as qos local id tag Set tag of route traffic-index Specify BGP Traffic Accounting Index[R2-route-policy]apply cost 100 [R2-route-policy]display this[V200R003C00]#route-policy haha permit node 10 if-match acl 2000 apply cost 100 #return[R2-route-policy]注入[R2]ospf [R2-ospf-1]undo import-route rip [R2-ospf-1]import-route rip route-policy haha 策略路由(策略转发)整个路由转发路径的路由不是静态的或者动态构建，而是通过策略构建的","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://qiyuesanren.github.io/categories/计算机网络/"}],"tags":[{"name":"路由策略","slug":"路由策略","permalink":"https://qiyuesanren.github.io/tags/路由策略/"}]},{"title":"Clion运行多个Main函数","slug":"Clion运行多个Main 函数","date":"2020-11-26T23:34:00.000Z","updated":"2020-11-26T08:53:59.945Z","comments":true,"path":"2020/11/26/Clion运行多个Main 函数/","link":"","permalink":"https://qiyuesanren.github.io/2020/11/26/Clion运行多个Main 函数/","excerpt":"","text":"Clion运行多个main 函数在Clion中每写完一个题目都得重新配置一边 太难了，于是我找方法找到了一个完美的解决方法 在CMakeLists.txt中修改 1234567891011121314cmake_minimum_required(VERSION 3.17)project(PAT) set(CMAKE_CXX_STANDARD 14)# 上面呢不用修改，修改的在下面file (GLOB files *.cpp) # 遍历项目根目录下所有的 .cpp 文件foreach (file $&#123;files&#125;) string(REGEX REPLACE &quot;.+/(.+)\\\\..*&quot; &quot;\\\\1&quot; exe $&#123;file&#125;) add_executable ($&#123;exe&#125; $&#123;file&#125;) message (\\ \\ \\ \\ --\\ src/$&#123;exe&#125;.cpp\\ will\\ be\\ compiled\\ to\\ bin/$&#123;exe&#125;)endforeach () 修改完之后需要重新加载CMake项目 运行 注意：这种方法只能遍历根目录下的一层，如果根目录下还有文件夹，则里面的 cpp 文件没有被识别就需要更改file (GLOB files *.cpp) 123456789101112# 如果你只需要根目录下的 test 文件夹的所有 .cpp 文件file (GLOB files test/*.cpp)# 如果你只有两层目录的话file (GLOB files *.cpp */*.cpp)# 同理，三层的话file (GLOB files *.cpp */*.cpp */*/*.cpp) # 官方提供了一种递归的方法# 这样在运行框会多一个 CMakeCXXCompilerId，不过无伤大雅file (GLOB_RECURSE files *.cpp)","categories":[],"tags":[{"name":"Clion","slug":"Clion","permalink":"https://qiyuesanren.github.io/tags/Clion/"}]},{"title":"OSPF实验搭建","slug":"OSPF实验搭建","date":"2020-11-21T23:34:00.000Z","updated":"2020-11-27T13:15:28.283Z","comments":true,"path":"2020/11/21/OSPF实验搭建/","link":"","permalink":"https://qiyuesanren.github.io/2020/11/21/OSPF实验搭建/","excerpt":"","text":"OSPF实验搭建 RIP和末梢网络不在一起 配置IP(IP,环回地址)配置IP以R1为例子1234[R1]interface GigabitEthernet 0/0/0[R1-GigabitEthernet0/0/0]ip add [R1-GigabitEthernet0/0/0]ip address 192.168.1.2 24[R1-GigabitEthernet0/0/0]q 配置环回地址以R1为例子123[R1]interface LoopBack 0[R1-LoopBack0]ip address 1.1.1.1 24[R1-LoopBack0]q 配置路由器以配置路由器(R1)123456[R1]ospf[R1-ospf-1]area 0 //设置区域为0[R1-ospf-1-area-0.0.0.0]network 192.168.1.0 0.0.0.255 // 24为子网掩码 那么通配符掩码为 0.0.0.32-24=8=255[R1-ospf-1-area-0.0.0.0]network 1.1.1.0 0.0.0.255 // 24为子网掩码 那么通配符掩码为 0.0.0.32-24=8=255[R1-ospf-1-area-0.0.0.0]q[R1-ospf-1]q 配置R2的两个区域123456789设置区域0[R2]ospf[R2-ospf-1]area 0[R2-ospf-1-area-0.0.0.0]network 192.168.1.0 0.0.0.255[R2-ospf-1-area-0.0.0.0]network 2.2.2.0 0.0.0.255设置区域1[R2-ospf-1]area 1[R2-ospf-1-area-0.0.0.1]network 192.168.2.0 0.0.0.255[R2-ospf-1-area-0.0.0.1]q 检查OPSF邻居状态以R2为例dispaly ospf peer 123456789101112131415161718192021222324Area 0.0.0.0 interface 192.168.1.2(GigabitEthernet0/0/0)&apos;s neighborsRouter ID: 192.168.1.1 Address: 192.168.1.1 State: Full Mode:Nbr is Slave Priority: 1 DR: 192.168.1.1 BDR: 192.168.1.2 MTU: 0 Dead timer due in 40 sec Retrans timer interval: 0 Neighbor is up for 00:06:07 Authentication Sequence: [ 0 ] Router ID: 192.168.1.3 Address: 192.168.1.3 State: Full Mode:Nbr is Master Priority: 1 DR: 192.168.1.1 BDR: 192.168.1.2 MTU: 0 Dead timer due in 40 sec Retrans timer interval: 5 Neighbor is up for 00:03:04 Authentication Sequence: [ 0 ] Neighbors Area 0.0.0.1 interface 192.168.2.2(GigabitEthernet0/0/1)&apos;s neighborsRouter ID: 192.168.2.4 Address: 192.168.2.4 State: Full Mode:Nbr is Master Priority: 1 DR: 192.168.2.2 BDR: 192.168.2.4 MTU: 0 Dead timer due in 30 sec Retrans timer interval: 5 Neighbor is up for 00:03:43 Authentication Sequence: [ 0 ] 配置R3的Rip1234先增加一个本地环回当RIP使用[R3]interface LoopBack 1 [R3-LoopBack1]ip address 192.168.3.1 255.255.255.0 添加一个ip[R3-LoopBack1]q 添加RIP协议12345[R3]rip[R3-rip-1]undo summary [R3-rip-1]version 2[R3-rip-1]network 192.168.3.3[R3-rip-1]q 删除RIP协议12[R3]undo rip 1Warning: The RIP process will be deleted. Continue?[Y/N]y 将RIP协议注入到OSPF中12[R3]ospf[R3-ospf-1]import-route rip 删除rip注入12[R3]ospf[R3-ospf-1]undo import-route rip 查询路由表在R4中dispaly ip routing-table 123456789101112131415161718192021[R4]display ip routing-table Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public Destinations : 15 Routes : 15 Destination/Mask Proto Pre Cost Flags NextHop Interface1.1.1.1/32 OSPF 10 2 D 192.168.2.2 GigabitEthernet0/0/02.2.2.2/32 OSPF 10 1 D 192.168.2.2 GigabitEthernet0/0/03.3.3.3/32 OSPF 10 2 D 192.168.2.2 GigabitEthernet0/0/04.4.4.0/24 Direct 0 0 D 4.4.4.4 LoopBack04.4.4.4/32 Direct 0 0 D 127.0.0.1 LoopBack04.4.4.255/32 Direct 0 0 D 127.0.0.1 LoopBack0127.0.0.0/8 Direct 0 0 D 127.0.0.1 InLoopBack0127.0.0.1/32 Direct 0 0 D 127.0.0.1 InLoopBack0127.255.255.255/32 Direct 0 0 D 127.0.0.1 InLoopBack0192.168.1.0/24 OSPF 10 2 D 192.168.2.2 GigabitEthernet0/0/0192.168.2.0/24 Direct 0 0 D 192.168.2.4 GigabitEthernet0/0/0192.168.2.4/32 Direct 0 0 D 127.0.0.1 GigabitEthernet0/0/0192.168.2.255/32 Direct 0 0 D 127.0.0.1 GigabitEthernet0/0/0192.168.3.0/24 O_ASE 150 1 D 192.168.2.2 GigabitEthernet0/0/0255.255.255.255/32 Direct 0 0 D 127.0.0.1 InLoopBack0 可以看见192.168.3.0 网络已经OK了，O_ASE(外部区域网络) 问题分析(STUB区域搭建)R4中display ospf lsdb 查看数据链路情况 问题:R4中有许多，无用的信息 12345678910111213141516&lt;R4&gt;display ospf lsdb OSPF Process 1 with Router ID 192.168.2.4 Link State Database Area: 0.0.0.1 Type LinkState ID AdvRouter Age Len Sequence Metric Router 192.168.2.4 192.168.2.4 905 48 80000004 1 Router 192.168.1.2 192.168.1.2 908 36 80000005 1 Network 192.168.2.2 192.168.1.2 908 32 80000002 0 Sum-Net 3.3.3.3 192.168.1.2 864 28 80000001 1 Sum-Net 2.2.2.2 192.168.1.2 1022 28 80000001 0 Sum-Net 1.1.1.1 192.168.1.2 1022 28 80000001 1 Sum-Net 192.168.1.0 192.168.1.2 1022 28 80000001 1 Sum-Asbr 192.168.1.3 192.168.1.2 819 28 80000001 1 AS External Database Type LinkState ID AdvRouter Age Len Sequence Metric External 192.168.3.0 192.168.1.3 493 36 80000001 1 STUB在area 1 区域所有设备都设置STUB 设置STUB123[R4]ospf[R4-ospf-1]area 1[R4-ospf-1-area-0.0.0.1]stub 删除STUB区域123[R4]ospf[R4-ospf-1]area 1[R4-ospf-1-area-0.0.0.1]undo stub 查看数据链路情况 12345678910111213[R4]display ospf lsdb OSPF Process 1 with Router ID 192.168.2.4 Link State Database Area: 0.0.0.1 Type LinkState ID AdvRouter Age Len Sequence Metric Router 192.168.2.4 192.168.2.4 21 48 80000005 1 Router 192.168.1.2 192.168.1.2 22 36 80000004 1 Network 192.168.2.4 192.168.2.4 21 32 80000001 0 Sum-Net 0.0.0.0 192.168.1.2 61 28 80000001 1 Sum-Net 3.3.3.3 192.168.1.2 61 28 80000001 1 Sum-Net 2.2.2.2 192.168.1.2 61 28 80000001 0 Sum-Net 1.1.1.1 192.168.1.2 61 28 80000001 1 Sum-Net 192.168.1.0 192.168.1.2 61 28 80000001 1 多了一条三类0.0.0.0的缺省，访问数据，给到R2 完全STUB注意先是STUB才能升级完全STUB，不能一步到位 在area 1 区域中ABR设备上(R2)设置完全STUB 123[R2]ospf[R2-ospf-1]area 1[R2-ospf-1-area-0.0.0.1]stub no-summary 查看R4数据链路情况 123456789&lt;R4&gt;display ospf lsdb OSPF Process 1 with Router ID 192.168.2.4 Link State Database Area: 0.0.0.1 Type LinkState ID AdvRouter Age Len Sequence Metric Router 192.168.2.4 192.168.2.4 54 48 8000000A 1 Router 192.168.1.2 192.168.1.2 60 36 80000005 1 Network 192.168.2.4 192.168.2.4 54 32 80000002 0 Sum-Net 0.0.0.0 192.168.1.2 370 28 80000001 1 如果删除完全STUB，只用删除STUB就好了边界路由上含有RIP协议使用NSSA区域 如果AREA1区域还是完全STUB，R1就不可能学到RIP 设置NSSA区域在area 1 区域所有设备都设置NSSA 123[R4]ospf[R4-ospf-1]area 1[R4-ospf-1-area-0.0.0.1]nssa 删除NSSA区域 123[R4]ospf[R4-ospf-1]area 1[R4-ospf-1-area-0.0.0.1]undo nssa 查看链路状态 1234567891011121314[R4]display ospf lsdb OSPF Process 1 with Router ID 192.168.2.4 Link State Database Area: 0.0.0.1 Type LinkState ID AdvRouter Age Len Sequence Metric Router 192.168.2.4 192.168.2.4 93 48 80000006 1 Router 192.168.1.2 192.168.1.2 102 36 80000003 1 Network 192.168.2.4 192.168.2.4 93 32 80000002 0 Sum-Net 3.3.3.3 192.168.1.2 103 28 80000001 1 Sum-Net 2.2.2.2 192.168.1.2 103 28 80000001 0 Sum-Net 1.1.1.1 192.168.1.2 103 28 80000001 1 Sum-Net 192.168.1.0 192.168.1.2 103 28 80000001 1 NSSA 192.168.4.0 192.168.2.4 214 36 80000001 1 NSSA 0.0.0.0 192.168.1.2 103 36 设置完全NSSA区域注意先是nssa才能升级完全nssa，不能一步到位 如果删除完全NSSA，只用删除NSSA就好了 在area 1 区域中ABR设备上(R2)设置完全nasa 1[R2-ospf-1-area-0.0.0.1]nssa no-summary 查看链路状态 1234567891011[R4]display ospf lsdb OSPF Process 1 with Router ID 192.168.2.4 Link State Database Area: 0.0.0.1 Type LinkState ID AdvRouter Age Len Sequence Metric Router 192.168.2.4 192.168.2.4 16 48 8000000B 1 Router 192.168.1.2 192.168.1.2 17 36 80000004 1 Network 192.168.2.4 192.168.2.4 16 32 80000003 0 Sum-Net 0.0.0.0 192.168.1.2 28 28 80000001 1 NSSA 192.168.4.0 192.168.2.4 414 36 80000001 1 NSSA 0.0.0.0 192.168.1.2 303 36 80000001 1","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://qiyuesanren.github.io/categories/计算机网络/"}],"tags":[{"name":"OSPF","slug":"OSPF","permalink":"https://qiyuesanren.github.io/tags/OSPF/"}]},{"title":"OSPF","slug":"OSPF","date":"2020-11-18T19:00:57.000Z","updated":"2020-11-18T09:32:59.748Z","comments":true,"path":"2020/11/18/OSPF/","link":"","permalink":"https://qiyuesanren.github.io/2020/11/18/OSPF/","excerpt":"","text":"OSPF基础介绍： IETF针对中大型网络开发设计的一个动态路由选择协议 开放式最短路线优先 V1 –&gt;(实验室版本) V2 –&gt;(IPV4) V3 –&gt;(IPV6) 特点： 算法：SPF –&gt;（Dijkstra）算法 更新： LSA链路状态通告(摘要更新) 构建网络大体结构 LSA 30分钟 洪范一次 更新采用触发更新 区域： 区域(自行规划，每个区域的LSA只会在本区域洪范)：核心区域(0.0.0.0不是IP只是一个标识) +非核心区域(X.X.X.X) 非核心区域必须和核心区域链接 路由器身份： IR (内部路由器)：所有接口网段属于同一区域 ABR (区域边界路由器)：接口的网段属于不同区域 ASBR (自治系统边界路由器)：接口网段属于不同协议 特点： 支持VLSM和CIDR(无类别域间路) 支持路由认证 组播更新：224.0.0.5 224.0.0.6 OSPF 有一套自己的可保证性保障机制，使用IP封装，协议编号89 Route-ID –&gt; 唯一的身份标识 华为设备：第一个配置的有效接口地址作为身份标识 思科设备：最大的环回接口地址或最大的物理接口地址 人工的配置 邻居处理： 自己有可靠性保障机制 所以报文直接用IP封装 报文–&gt;邻居状态过度 Hello 用于建立邻居关系 DBD 包含了LSA LSR：用于查询详细网段路由信息 LSU：详细网段的路由信息 LSAck：确认报文 交互步骤(邻居有限状态机) down 设备没有任何动作 init 设备发送hello 报文 2-way 发送了Hello 也接受了hello ，并且hello报文中的参数匹配 exstart 邻居间发送Route-ID比较 决定哪一方先发送DBD (链路状态构造) exchange 发送DBD 并接受DBD构建网络拓扑结构 loading 查询具体网络信息 full(完整) 正常转发 Hello 决定性参数 发送Hello 报文接口所属区域ID 接口所属网段信息 接口设置Hello 发送间隔和死亡时间(如果双方更改时间不一样，可能会出问题) 接口是否设置认证 接口是否属于特殊区域标记 接口的MTU(最大传输单元)值： 邻居可以正常建立但是无法交互DBD报文OSPF认证 加密：用来保证数据传输的安全，解决私密性 认证：1.验证双方身份的合法性，2.数据的完整性(内容没有被串改) 认证方式：链路认证+区域认证 DR/BDR问题1234567891011DR（Designated Router）：指定路由器，OSPF协议启动后开始选举而来BDR（Back-up Designated Router）：备份指定路由器，同样是由OSPF启动后选举而来DRothers：其他路由器，非DR非BDR的路由器都是DRothers。ABR（Area Border Routers：区域边界路由器，连接不同OSPF区域。ASBR（Autonomous System Boundary Router）：自治系统边界路由器，位于OSPF和非OSPF网络之间。骨干路由器：至少有一个借口连接到骨干区域（区域0） 选举BR和DBR 所有设备都会申明自己是BDR，当选举结束后，没有DR，当前BDR会成为DR。 比较接口优先级(0-255 默认为1)，越大表示越优先，如果为0，则不掺假选举。 比较Router-ID 数字越大，优先级越高。 注意：OSPF选举是非抢占性的(只要BR选出来了，如果来了优先级更高的路由器，不会让新来的路由器成为DR)，如果要人工干预OSPF选举(改接口优先级)，需要重启DR，BDR设备的OSPF进程。 组播地址 224.0.0.6 (组播地址), DR/BDR使用，确保数据交互，存活状态检查。 LSA链路状态通告包含着DBD报文中 常用通告，1，2，3，4，5，7类LSA。 1类LSA：每台设备都会产生，包含本地链路状态摘要，只在同区域内扩散。 2类LAS：DR产生，用于向其他非DR/BDR设备宣告自己位置，只在同区域内扩散，通过DR相互中转。 3类LAS：ABR产生，用户向本区域宣告非本区域网络摘要信息(1类LSA通过ABR变3LSA)。 4类LAS：ABR产生，用于向本区域宣告ASBR位置。 5类LAS：ASBR产生，ASBR用于向OSPF网络宣告外部网络信息，ASBR把RIP信息变成5类发到OSPF。 特殊区域123456789101112STUB：末梢区域完全STUB：Totaly STUB非完全STUB：NSSA完全非完全STUB：Totaly NSSA所有特殊区域只能够对非核心区域设置注意：不是所有STUB都支持完全STUB，但都支持STUB通过看是不是外部网络(与外部区域相连)的注入来确定STUB，还是非完全STUB如果属于特殊区域，设备建临，对接口发送的HELLO报文进行特殊区域标记，改完特殊区域后，会对重新进行邻居建立 A1区域通过4类，5类(麻烦了)去了解RIP，所以把A1区域作为STUB区域。 STUB(末梢区域):当一个非核心区域被设置成为STUB区域，那么连接该区域的ABR设备就不会向该区域发送4类(LSA)，5类(LSA)而是发一条缺省3类LSA，但是还是有A0还会向A1发送3类(没用)。 完全STUB区域(Totaly STUB)：当一个非核心区域被设置成为完全STUB后，该区域的ABR不会再向该区域发送3、4、5类LSA，而是改发一条缺省3类LSA。 完全STUB区域的问题：**如果一个非核心区域是外部网络的注入区域，那么STUB后，4、5类LSA就会被抑制，本区域不会受到影响，但是OSPF其他区域就无法正常学习到外部网络信息。 非完全STUB：当一个非核心区域被设置成为非完全STUB后，该区域的4、5类会被抑制，变成一条缺省3类，那么，5类会转变为7类LSA，通过ABR向其他区域发送。 完全非完全STUB：当一个非核心区域被设置成为完全非完全STUB后，该区域的3、4、5类会被抑制，变成一条缺省3类，5类会转变为7类LSA，通过ABR向其他区域发送。 虚拟连接因为OSPF要求非核心区域必须和核心区域链接，但是有时因为某些情况会导致非核心无法和核心直连，或者核心区区域不连续，ABR设备就可以通过逻辑虚连接来保证要求 。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://qiyuesanren.github.io/categories/计算机网络/"}],"tags":[{"name":"OSPF","slug":"OSPF","permalink":"https://qiyuesanren.github.io/tags/OSPF/"}]},{"title":"RIP实验搭建","slug":"RIP搭建","date":"2020-11-16T06:54:57.000Z","updated":"2020-11-27T13:15:27.299Z","comments":true,"path":"2020/11/15/RIP搭建/","link":"","permalink":"https://qiyuesanren.github.io/2020/11/15/RIP搭建/","excerpt":"","text":"RIP实验环境：ENSP 配置IP(IP,网关)配置PC(以PC1为例子)机器的IP地址= 网段为192.168.1.0+机器编号为1=192.168.1.1 网关=网段192.168.1.0+254=192.168.1.254 配置路由器(以AR1为例)12345678910&lt;Huawei&gt;system-view //切换系统视图[Huawei]interface GigabitEthernet 0/0/0 //设置0/0/0端口[Huawei-GigabitEthernet0/0/0]ip address 192.168.1.254 24 //因为网段为192.168.1.0，而且直接与电脑相连接，所以设置IP为192.168.1.254，24为子网掩码[Huawei-GigabitEthernet0/0/0]q //退出0/0/0 端口[Huawei]interface GigabitEthernet 0/0/1 //设置0/0/1端口[Huawei-GigabitEthernet0/0/1]ip address 172.16.1.1 16 //因为网段为172.16.1.0 16 设备编号为1，所以设置IP为172.16.1.1，16为子网掩码[Huawei-GigabitEthernet0/0/1]q //退出0/0/0 端口//到这里为止IP就算是配置好了[Huawei]display current-configuration //查看路由器配置信息注意：如果端口的ip配错了，直接进入端口重新设置一边ip就好了，因为一个端口只能有一个IP 配置路由器协议配置RIP协议，以AR1为例： 1234567891011121314151617[Huawei]rip [Huawei-rip-1]undo summary //关闭自动汇总[Huawei-rip-1]version 2 //选择版本V2[Huawei-rip-1]network 172.16.0.0 [Huawei-rip-1]network 192.168.1.0 [Huawei-rip-1]q关于networkA类IP段：0.0.0.0 到 127.255.255.255.A类 网段都是x.0.0.0B类IP段：128.0.0.0 到 191.255.255.255.B类 网段都是x.x.0.0C类IP段：192.0.0.0 到 223.255.255.255.C类 网段都是x.x.x.0 如果网段配错了： 12345678910111213141516171819202122[Huawei]rip [Huawei-rip-1]display this[V200R003C00]#rip 1 undo summary version 2 network 172.16.0.0 network 1.0.0.0#return [Huawei-rip-1]undo network 172.16.0.0 //删除网段[Huawei-rip-1]display this //查看RIP-1的网段信息[V200R003C00]#rip 1 undo summary version 2 network 1.0.0.0#return//然后再重新添加 删除RIP协议 1234[Huawei]rip //查看编号[Huawei-rip-1]q // 显示编号为RIP-1[Huawei]undo rip 1 //删除RIP-1 Warning: The RIP process will be deleted. Continue?[Y/N]y 输入Y 查询路由表display ip routing-table查询路由表信息 以R2为例 12345678910111213141516171819202122[Huawei]display ip routing-table Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public Destinations : 13 Routes : 13 Destination/Mask Proto Pre Cost Flags NextHop Interface1.0.0.0/8 Direct 0 0 D 1.1.1.2 GigabitEthernet0/0/11.1.1.2/32 Direct 0 0 D 127.0.0.1 GigabitEthernet0/0/11.255.255.255/32 Direct 0 0 D 127.0.0.1 GigabitEthernet0/0/1127.0.0.0/8 Direct 0 0 D 127.0.0.1 InLoopBack0127.0.0.1/32 Direct 0 0 D 127.0.0.1 InLoopBack0127.255.255.255/32 Direct 0 0 D 127.0.0.1 InLoopBack0172.15.0.0/16 RIP 100 1 D 1.1.1.3 GigabitEthernet0/0/1172.16.0.0/16 Direct 0 0 D 172.16.1.2 GigabitEthernet0/0/0172.16.1.2/32 Direct 0 0 D 127.0.0.1 GigabitEthernet0/0/0172.16.255.255/32 Direct 0 0 D 127.0.0.1 GigabitEthernet0/0/0192.168.1.0/24 RIP 100 1 D 172.16.1.1 GigabitEthernet0/0/0192.168.2.0/24 RIP 100 2 D 1.1.1.3 GigabitEthernet0/0/1255.255.255.255/32 Direct 0 0 D 127.0.0.1 InLoopBack0Destination/Mask(网段信息)Proto(连接方式) 测试(ping)","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://qiyuesanren.github.io/categories/计算机网络/"}],"tags":[{"name":"RIP","slug":"RIP","permalink":"https://qiyuesanren.github.io/tags/RIP/"}]},{"title":"动态路由协议的原理+RIP","slug":"动态路由协议的原理+RIP","date":"2020-11-13T17:54:57.000Z","updated":"2020-11-18T09:29:54.491Z","comments":true,"path":"2020/11/13/动态路由协议的原理+RIP/","link":"","permalink":"https://qiyuesanren.github.io/2020/11/13/动态路由协议的原理+RIP/","excerpt":"","text":"动态路由协议的原理+RIP路由协议网络层 路由：指导数据包转发的路径 路由表的构建(获得)方式 直连路由：路由器直接连接的网络的路由 静态路由：网络管理员通过人工设置构建(配置)的路由 优点：安全，没有设备计算设备占用 缺点：需要管理员熟悉网络结构，针对于大型网络—-&gt;配置复杂，工作量大，不灵活,发生变动需要调整 动态路由：路由器通过运行动态路由选择协议学习到的路由 范围划分 IGP 内部网关协议—-&gt;RIP(距离矢量算法),OSPF(最短路径优先),IS-IS(中间系统到中间系统),EIGRP(思科) EGP 外部网关协议—-&gt;BGP(边界网关协议) AS：自治系统—-&gt;一个网络受同意组织管理和维护(大公司，运营商)—-&gt;自治系统受到国际性组织认可会颁发一个全球的唯一自治性编号 不同的路由协议学习到相同的目的网络 优先级/管理距离：当不同的路由协议学习到相同的目的网络，通过优先级\\管理距离来区分路由的好坏 华为设备：直连 0 OSPF 10 IS-IS 15 静态60 RIP 100 BGP 255 —-&gt;(数字越低越好) 度量值(cost)：同一种协议学习到相同的目的网络，通过度量值区分路由和的好坏 距离矢量：通过目的地址的网络与本地的远近(需要经过多少台路由器) 链路状态：通过带宽进行计算 路径：加入人工指定的参数，通过某种规则，比较人工指定的参数，进行选择 动态路由原理 12345图中四个网段(横线，1.0 2.0 3.0 4.0)第一个路由器知道直连网络1.0和2.0第二个路由器知道直连网络2.0和3.0第三个路由器知道直连网络3.0和4.0 直连网络 —-&gt;1.0想去4.0—-&gt;路由器只知道1.0和2.0，就会把数据丢弃掉 静态路由 —-&gt;1.0想去4.0—-&gt;数据从哪发出去，扔到那，都已经被指定好了 动态路由 —-&gt;(距离矢量)—-&gt; 更新数据包：本地路由信息，用于让其他设备学习 收敛完成：所有路由器通过学习构建整网的网段信息，可以进行数据转发 动态路由的好坏：收敛完成的速度 更新方式 周期性更新 如果，一个路由出问题，陷入路由环路(两台路由器都错误的认为对方是自己去往的下一台设备) 解决办法 水平分割：从一个接口收到收到的跟新不会再从这个接口发出 老化：路由器没学到一条路由器都会进行老化计时，如果时间到达老化时间同时仍没有收到更新那么则认为这条路由出现故障 毒性逆转：从一个接口收到的路由仍会从该接口发回，但是发回时，度量值会标记为无穷大(及不可达) 最大条数限制：会限制更新数据包的转发次数 触发更新 ：收敛完成之后，只有那个网络出现问题，才会针对出现问题的网络，然后通知别人，不要相信他 RIP协议(中小型网络)度量值(cost)：距离矢量 根据更新包( 封装在UDP使用端口520)的跳数(最大跳数15 ，16即是不可达) 版本 V1 有类网络 更新发送的地址 255.255.255.255 (广播地址 )更新路由表–&gt;不安全 V2 无类网络 更新发送的地址 224.0.0.09 (组播地址) 更新路由表 更新 路由认证 明文认证 密文认证 NG IPV6 静默接口 —- &gt; 如果一个接口被配置为静默接口那麽该接口只接受更新，不会主动发送更新 *单播更新 *—- &gt;指定具体IP地址，更新包只会发向该IP 更新方式：周期性+触发 周期性:30S 老化时间：180S 垃圾时间：120S 每30秒，把自己知道的网络告诉别人一次，如果这个过程中某个网络断掉了，不会等到下一个30S，而是直接告诉别人，那个网络出现了故障，开启老化时间180S，如果这个设备确实出现了问题(180S到了以后)，进行垃圾处理时间(120S) 180S+120S =5MIN才能删除","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://qiyuesanren.github.io/categories/计算机网络/"}],"tags":[{"name":"RIP","slug":"RIP","permalink":"https://qiyuesanren.github.io/tags/RIP/"}]},{"title":"计算机网络基础","slug":"计算机网络基础","date":"2020-11-05T20:22:47.000Z","updated":"2020-11-13T09:45:22.983Z","comments":true,"path":"2020/11/05/计算机网络基础/","link":"","permalink":"https://qiyuesanren.github.io/2020/11/05/计算机网络基础/","excerpt":"","text":"话不多说，直接上图 12345678910111213141516171819202122应用层 --&gt;人机交互接口 --&gt; 你好，在嘛表示层 --&gt;编码解码，数据压缩 --&gt; 010101会话层 --&gt;区分进程 --&gt; QQ的数据传输层 --&gt;端到端的传输 --&gt; 传输层+QQ的数据网络层 --&gt; 逻辑寻址，路由 --&gt; 网络层+传输层+QQ的数据数据链路层--&gt;对信号进行还原验证，物理寻址 --&gt; 数据链路层+网络层+传输层+QQ的数据+冗余校验值物理层 --&gt;电气，电压特性 ，接口针脚等规范 --&gt; ~~~~ 电信号集线器：将网线集中到一起的机器，即星型连接拓扑结构，多台电脑通过集线器对信号进行广播转发，实现互连互通，工作在物理层。中继器：连接同一个网络的两个或多个网段，通过放大信号来扩大网络传输的距离，工作在物理层。交换机：集线器的升级换代产品，不同于集线器的广播，它具备自动寻址能力和交换作用，将信息转发至指定端口，工作在数据链路层。网桥：将两个局域网（LAN）连起来，常用来扩展LAN，工作在数据链路层，网桥主要由软件实现，交换机主要由硬件实现。路由器：实现不同网络或网段之间互相连接，可以将不同网络间的数据信息进行转换，并根据IP进行寻址转发数据包，工作在网络层。网关：又叫协议转换器，能将异种网络互连起来，实现不同高层协议互相转换的网络互联设备。网关兼有路由器、网桥、中继器的特性。 CSMA/CD 123CSMA/CD 载波侦听,多路访问/冲突检测作用：快速以太网的介质访问控制方法特点：先听先发，边听边发，冲突停发，随机重发 计算机网络系统的逻辑结构包括通信子网和资源子网 决定局域网特性的主要检测技术一般认为有三个 123传输介质介质访问控制方法拓扑结构--&gt;总线型，星型，树型，环形，全网状 网络划分 1234LAN(局域网) =路由技术 MIN(个域网) 随身wifi MAX 校园网WAN(广域网)=路由技术 (网络由运营商维护) Internet(因特网/注册商标)+广播电视+卫星通讯 属于 internet(国际互联网) 冲突 12一段链路中，双向信号产生冲突冲突域：产生冲突可能性的区域 广播 12- 接收信号发送给所有人- 广播域：产生广播可能性的区域","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://qiyuesanren.github.io/categories/计算机网络/"}],"tags":[{"name":"网络基础","slug":"网络基础","permalink":"https://qiyuesanren.github.io/tags/网络基础/"}]},{"title":"Hello","slug":"Hello","date":"2020-11-04T08:51:45.000Z","updated":"2020-11-13T09:45:36.763Z","comments":true,"path":"2020/11/04/Hello/","link":"","permalink":"https://qiyuesanren.github.io/2020/11/04/Hello/","excerpt":"","text":"测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试","categories":[{"name":"分类","slug":"分类","permalink":"https://qiyuesanren.github.io/categories/分类/"}],"tags":[{"name":"标签","slug":"标签","permalink":"https://qiyuesanren.github.io/tags/标签/"}]}]}